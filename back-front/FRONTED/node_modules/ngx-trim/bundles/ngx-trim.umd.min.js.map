{"version":3,"sources":["ng://ngx-trim/lib/ngx-trim.directive.ts","ng://ngx-trim/lib/ngx-trim.module.ts"],"names":["TRIM_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","NgxTrimDirective","multi","_renderer","_elementRef","this","prototype","_onChange","_","_onTouched","registerOnChange","fn","registerOnTouched","writeValue","value","undefined","setProperty","nativeElement","ngOnInit","onEvent","_onKeyUp","event","type","val","trim","Directive","args","selector","providers","Renderer2","ElementRef","Input","HostListener","NgxTrimModule","NgModule","imports","CommonModule","FormsModule","declarations","exports"],"mappings":"iXAWA,IAAMA,EAAsB,CAC1BC,QAASC,EAAAA,kBAETC,YAAaC,EAAAA,WAAW,WAAM,OAAAC,IAC9BC,OAAO,gBAmBP,SAAAD,EAAoBE,EAA8BC,GAA9BC,KAAAF,UAAAA,EAA8BE,KAAAD,YAAAA,SARlDH,EAAAK,UAAAC,UAAA,SAAUC,KACVP,EAAAK,UAAAG,WAAA,aACAR,EAAAK,UAAAI,iBAAA,SAAiBC,GACfN,KAAKE,UAAYI,GAEnBV,EAAAK,UAAAM,kBAAA,SAAkBD,GAChBN,KAAKI,WAAaE,GAIpBV,EAAAK,UAAAO,WAAA,SAAWC,GACLA,IAAUC,WAAuB,OAAVD,GACzBT,KAAKF,UAAUa,YACbX,KAAKD,YAAYa,cACjB,QACAH,IAKNb,EAAAK,UAAAY,SAAA,WACEb,KAAKc,QAAUd,KAAKc,SAAW,YAKjClB,EAAAK,UAAAc,kBAASC,GACP,GAAIhB,KAAKc,UAAYE,EAAMC,KAAM,CAC/B,IACMC,EAD4BF,EAAY,OAC1BP,MAAMU,OAC1BnB,KAAKQ,WAAWU,GAChBlB,KAAKE,UAAUgB,yBAvCpBE,EAAAA,UAASC,KAAA,CAAC,CAETC,SAAU,iBACVC,UAAW,CAAChC,gDAfZiC,EAAAA,iBAJAC,EAAAA,+CAuBCC,EAAAA,MAAKL,KAAA,CAAC,6BAyBNM,EAAAA,aAAYN,KAAA,CAAC,QAAS,CAAC,YAAS,CAAAJ,KAChCU,EAAAA,aAAYN,KAAA,CAAC,WAAY,CAAC,mBCnD7BO,EAAA,oDAKCC,EAAAA,SAAQR,KAAA,CAAC,CACRS,QAAS,CAACC,EAAAA,aAAcC,EAAAA,aACxBC,aAAc,CAACrC,GACfsC,QAAS,CAACtC,SARZ","sourcesContent":["import {\n  Directive,\n  ElementRef,\n  forwardRef,\n  HostListener,\n  OnInit,\n  Renderer2\n} from '@angular/core';\nimport { Input } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nconst TRIM_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  // tslint:disable-next-line:no-forward-ref\n  useExisting: forwardRef(() => NgxTrimDirective),\n  multi: true\n};\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: 'input[ngxTrim]',\n  providers: [TRIM_VALUE_ACCESSOR]\n})\nexport class NgxTrimDirective implements ControlValueAccessor, OnInit {\n  // tslint:disable-next-line:no-input-rename\n  @Input('ngxTrim') onEvent: 'keyup' | 'focusout';\n  _onChange(_: any) {}\n  _onTouched() {}\n  registerOnChange(fn: (value: any) => any): void {\n    this._onChange = fn;\n  }\n  registerOnTouched(fn: () => any): void {\n    this._onTouched = fn;\n  }\n  constructor(private _renderer: Renderer2, private _elementRef: ElementRef) {}\n\n  writeValue(value: any): void {\n    if (value !== undefined && value !== null) {\n      this._renderer.setProperty(\n        this._elementRef.nativeElement,\n        'value',\n        value\n      );\n    }\n  }\n\n  ngOnInit() {\n    this.onEvent = this.onEvent || 'focusout';\n  }\n\n  @HostListener('keyup', ['$event'])\n  @HostListener('focusout', ['$event'])\n  _onKeyUp(event: Event) {\n    if (this.onEvent === event.type) {\n      const element = <HTMLInputElement>event.target;\n      const val = element.value.trim();\n      this.writeValue(val);\n      this._onChange(val);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NgxTrimDirective } from './ngx-trim.directive';\n\n@NgModule({\n  imports: [CommonModule, FormsModule],\n  declarations: [NgxTrimDirective],\n  exports: [NgxTrimDirective]\n})\nexport class NgxTrimModule {}\n"]}