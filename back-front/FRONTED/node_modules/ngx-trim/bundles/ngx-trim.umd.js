(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-trim', ['exports', '@angular/core', '@angular/forms', '@angular/common'], factory) :
    (factory((global['ngx-trim'] = {}),global.ng.core,global.ng.forms,global.ng.common));
}(this, (function (exports,core,forms,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ TRIM_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        // tslint:disable-next-line:no-forward-ref
        useExisting: core.forwardRef(function () { return NgxTrimDirective; }),
        multi: true
    };
    var NgxTrimDirective = (function () {
        function NgxTrimDirective(_renderer, _elementRef) {
            this._renderer = _renderer;
            this._elementRef = _elementRef;
        }
        /**
         * @param {?} _
         * @return {?}
         */
        NgxTrimDirective.prototype._onChange = /**
         * @param {?} _
         * @return {?}
         */
            function (_) { };
        /**
         * @return {?}
         */
        NgxTrimDirective.prototype._onTouched = /**
         * @return {?}
         */
            function () { };
        /**
         * @param {?} fn
         * @return {?}
         */
        NgxTrimDirective.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this._onChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NgxTrimDirective.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this._onTouched = fn;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NgxTrimDirective.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (value !== undefined && value !== null) {
                    this._renderer.setProperty(this._elementRef.nativeElement, 'value', value);
                }
            };
        /**
         * @return {?}
         */
        NgxTrimDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.onEvent = this.onEvent || 'focusout';
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NgxTrimDirective.prototype._onKeyUp = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (this.onEvent === event.type) {
                    var /** @type {?} */ element = (event.target);
                    var /** @type {?} */ val = element.value.trim();
                    this.writeValue(val);
                    this._onChange(val);
                }
            };
        NgxTrimDirective.decorators = [
            { type: core.Directive, args: [{
                        // tslint:disable-next-line:directive-selector
                        selector: 'input[ngxTrim]',
                        providers: [TRIM_VALUE_ACCESSOR]
                    },] },
        ];
        /** @nocollapse */
        NgxTrimDirective.ctorParameters = function () {
            return [
                { type: core.Renderer2, },
                { type: core.ElementRef, },
            ];
        };
        NgxTrimDirective.propDecorators = {
            "onEvent": [{ type: core.Input, args: ['ngxTrim',] },],
            "_onKeyUp": [{ type: core.HostListener, args: ['keyup', ['$event'],] }, { type: core.HostListener, args: ['focusout', ['$event'],] },],
        };
        return NgxTrimDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgxTrimModule = (function () {
        function NgxTrimModule() {
        }
        NgxTrimModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule, forms.FormsModule],
                        declarations: [NgxTrimDirective],
                        exports: [NgxTrimDirective]
                    },] },
        ];
        return NgxTrimModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.NgxTrimDirective = NgxTrimDirective;
    exports.NgxTrimModule = NgxTrimModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXRyaW0udW1kLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9uZ3gtdHJpbS9saWIvbmd4LXRyaW0uZGlyZWN0aXZlLnRzIiwibmc6Ly9uZ3gtdHJpbS9saWIvbmd4LXRyaW0ubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgZm9yd2FyZFJlZixcbiAgSG9zdExpc3RlbmVyLFxuICBPbkluaXQsXG4gIFJlbmRlcmVyMlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmNvbnN0IFRSSU1fVkFMVUVfQUNDRVNTT1IgPSB7XG4gIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZm9yd2FyZC1yZWZcbiAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTmd4VHJpbURpcmVjdGl2ZSksXG4gIG11bHRpOiB0cnVlXG59O1xuXG5ARGlyZWN0aXZlKHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuICBzZWxlY3RvcjogJ2lucHV0W25neFRyaW1dJyxcbiAgcHJvdmlkZXJzOiBbVFJJTV9WQUxVRV9BQ0NFU1NPUl1cbn0pXG5leHBvcnQgY2xhc3MgTmd4VHJpbURpcmVjdGl2ZSBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBPbkluaXQge1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8taW5wdXQtcmVuYW1lXG4gIEBJbnB1dCgnbmd4VHJpbScpIG9uRXZlbnQ6ICdrZXl1cCcgfCAnZm9jdXNvdXQnO1xuICBfb25DaGFuZ2UoXzogYW55KSB7fVxuICBfb25Ub3VjaGVkKCkge31cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKHZhbHVlOiBhbnkpID0+IGFueSk6IHZvaWQge1xuICAgIHRoaXMuX29uQ2hhbmdlID0gZm47XG4gIH1cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IGFueSk6IHZvaWQge1xuICAgIHRoaXMuX29uVG91Y2hlZCA9IGZuO1xuICB9XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX3JlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHt9XG5cbiAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZCB7XG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwpIHtcbiAgICAgIHRoaXMuX3JlbmRlcmVyLnNldFByb3BlcnR5KFxuICAgICAgICB0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgICd2YWx1ZScsXG4gICAgICAgIHZhbHVlXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMub25FdmVudCA9IHRoaXMub25FdmVudCB8fCAnZm9jdXNvdXQnO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcigna2V5dXAnLCBbJyRldmVudCddKVxuICBASG9zdExpc3RlbmVyKCdmb2N1c291dCcsIFsnJGV2ZW50J10pXG4gIF9vbktleVVwKGV2ZW50OiBFdmVudCkge1xuICAgIGlmICh0aGlzLm9uRXZlbnQgPT09IGV2ZW50LnR5cGUpIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSA8SFRNTElucHV0RWxlbWVudD5ldmVudC50YXJnZXQ7XG4gICAgICBjb25zdCB2YWwgPSBlbGVtZW50LnZhbHVlLnRyaW0oKTtcbiAgICAgIHRoaXMud3JpdGVWYWx1ZSh2YWwpO1xuICAgICAgdGhpcy5fb25DaGFuZ2UodmFsKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBOZ3hUcmltRGlyZWN0aXZlIH0gZnJvbSAnLi9uZ3gtdHJpbS5kaXJlY3RpdmUnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBGb3Jtc01vZHVsZV0sXG4gIGRlY2xhcmF0aW9uczogW05neFRyaW1EaXJlY3RpdmVdLFxuICBleHBvcnRzOiBbTmd4VHJpbURpcmVjdGl2ZV1cbn0pXG5leHBvcnQgY2xhc3MgTmd4VHJpbU1vZHVsZSB7fVxuIl0sIm5hbWVzIjpbIk5HX1ZBTFVFX0FDQ0VTU09SIiwiZm9yd2FyZFJlZiIsIkRpcmVjdGl2ZSIsIlJlbmRlcmVyMiIsIkVsZW1lbnRSZWYiLCJJbnB1dCIsIkhvc3RMaXN0ZW5lciIsIk5nTW9kdWxlIiwiQ29tbW9uTW9kdWxlIiwiRm9ybXNNb2R1bGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxJQVdBLHFCQUFNLG1CQUFtQixHQUFHO1FBQzFCLE9BQU8sRUFBRUEsdUJBQWlCOztRQUUxQixXQUFXLEVBQUVDLGVBQVUsQ0FBQyxjQUFNLE9BQUEsZ0JBQWdCLEdBQUEsQ0FBQztRQUMvQyxLQUFLLEVBQUUsSUFBSTtLQUNaLENBQUM7O1FBa0JBLDBCQUFvQixTQUFvQixFQUFVLFdBQXVCO1lBQXJELGNBQVMsR0FBVCxTQUFTLENBQVc7WUFBVSxnQkFBVyxHQUFYLFdBQVcsQ0FBWTtTQUFJOzs7OztRQVI3RSxvQ0FBUzs7OztZQUFULFVBQVUsQ0FBTSxLQUFJOzs7O1FBQ3BCLHFDQUFVOzs7WUFBVixlQUFlOzs7OztRQUNmLDJDQUFnQjs7OztZQUFoQixVQUFpQixFQUF1QjtnQkFDdEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7YUFDckI7Ozs7O1FBQ0QsNENBQWlCOzs7O1lBQWpCLFVBQWtCLEVBQWE7Z0JBQzdCLElBQUksQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO2FBQ3RCOzs7OztRQUdELHFDQUFVOzs7O1lBQVYsVUFBVyxLQUFVO2dCQUNuQixJQUFJLEtBQUssS0FBSyxTQUFTLElBQUksS0FBSyxLQUFLLElBQUksRUFBRTtvQkFDekMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQ3hCLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUM5QixPQUFPLEVBQ1AsS0FBSyxDQUNOLENBQUM7aUJBQ0g7YUFDRjs7OztRQUVELG1DQUFROzs7WUFBUjtnQkFDRSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLElBQUksVUFBVSxDQUFDO2FBQzNDOzs7OztRQUlELG1DQUFROzs7O3NCQUFDLEtBQVk7Z0JBQ25CLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxLQUFLLENBQUMsSUFBSSxFQUFFO29CQUMvQixxQkFBTSxPQUFPLElBQXFCLEtBQUssQ0FBQyxNQUFNLENBQUEsQ0FBQztvQkFDL0MscUJBQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQ2pDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ3JCLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ3JCOzs7b0JBeENKQyxjQUFTLFNBQUM7O3dCQUVULFFBQVEsRUFBRSxnQkFBZ0I7d0JBQzFCLFNBQVMsRUFBRSxDQUFDLG1CQUFtQixDQUFDO3FCQUNqQzs7Ozs7d0JBaEJDQyxjQUFTO3dCQUpUQyxlQUFVOzs7O2dDQXVCVEMsVUFBSyxTQUFDLFNBQVM7aUNBeUJmQyxpQkFBWSxTQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxjQUNoQ0EsaUJBQVksU0FBQyxVQUFVLEVBQUUsQ0FBQyxRQUFRLENBQUM7OytCQW5EdEM7Ozs7Ozs7QUNBQTs7OztvQkFLQ0MsYUFBUSxTQUFDO3dCQUNSLE9BQU8sRUFBRSxDQUFDQyxtQkFBWSxFQUFFQyxpQkFBVyxDQUFDO3dCQUNwQyxZQUFZLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQzt3QkFDaEMsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7cUJBQzVCOzs0QkFURDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9