{"version":3,"file":"ngx-trim.js.map","sources":["ng://ngx-trim/lib/ngx-trim.directive.ts","ng://ngx-trim/lib/ngx-trim.module.ts"],"sourcesContent":["import {\n  Directive,\n  ElementRef,\n  forwardRef,\n  HostListener,\n  OnInit,\n  Renderer2\n} from '@angular/core';\nimport { Input } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nconst TRIM_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  // tslint:disable-next-line:no-forward-ref\n  useExisting: forwardRef(() => NgxTrimDirective),\n  multi: true\n};\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: 'input[ngxTrim]',\n  providers: [TRIM_VALUE_ACCESSOR]\n})\nexport class NgxTrimDirective implements ControlValueAccessor, OnInit {\n  // tslint:disable-next-line:no-input-rename\n  @Input('ngxTrim') onEvent: 'keyup' | 'focusout';\n  _onChange(_: any) {}\n  _onTouched() {}\n  registerOnChange(fn: (value: any) => any): void {\n    this._onChange = fn;\n  }\n  registerOnTouched(fn: () => any): void {\n    this._onTouched = fn;\n  }\n  constructor(private _renderer: Renderer2, private _elementRef: ElementRef) {}\n\n  writeValue(value: any): void {\n    if (value !== undefined && value !== null) {\n      this._renderer.setProperty(\n        this._elementRef.nativeElement,\n        'value',\n        value\n      );\n    }\n  }\n\n  ngOnInit() {\n    this.onEvent = this.onEvent || 'focusout';\n  }\n\n  @HostListener('keyup', ['$event'])\n  @HostListener('focusout', ['$event'])\n  _onKeyUp(event: Event) {\n    if (this.onEvent === event.type) {\n      const element = <HTMLInputElement>event.target;\n      const val = element.value.trim();\n      this.writeValue(val);\n      this._onChange(val);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NgxTrimDirective } from './ngx-trim.directive';\n\n@NgModule({\n  imports: [CommonModule, FormsModule],\n  declarations: [NgxTrimDirective],\n  exports: [NgxTrimDirective]\n})\nexport class NgxTrimModule {}\n"],"names":[],"mappings":";;;;;;;;AAAA,AAWA,qBAAM,mBAAmB,GAAG;IAC1B,OAAO,EAAE,iBAAiB;;IAE1B,WAAW,EAAE,UAAU,CAAC,cAAM,OAAA,gBAAgB,GAAA,CAAC;IAC/C,KAAK,EAAE,IAAI;CACZ,CAAC;;IAkBA,0BAAoB,SAAoB,EAAU,WAAuB;QAArD,cAAS,GAAT,SAAS,CAAW;QAAU,gBAAW,GAAX,WAAW,CAAY;KAAI;;;;;IAR7E,oCAAS;;;;IAAT,UAAU,CAAM,KAAI;;;;IACpB,qCAAU;;;IAAV,eAAe;;;;;IACf,2CAAgB;;;;IAAhB,UAAiB,EAAuB;QACtC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;KACrB;;;;;IACD,4CAAiB;;;;IAAjB,UAAkB,EAAa;QAC7B,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;KACtB;;;;;IAGD,qCAAU;;;;IAAV,UAAW,KAAU;QACnB,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE;YACzC,IAAI,CAAC,SAAS,CAAC,WAAW,CACxB,IAAI,CAAC,WAAW,CAAC,aAAa,EAC9B,OAAO,EACP,KAAK,CACN,CAAC;SACH;KACF;;;;IAED,mCAAQ;;;IAAR;QACE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,IAAI,UAAU,CAAC;KAC3C;;;;;IAID,mCAAQ;;;;cAAC,KAAY;QACnB,IAAI,IAAI,CAAC,OAAO,KAAK,KAAK,CAAC,IAAI,EAAE;YAC/B,qBAAM,OAAO,qBAAqB,KAAK,CAAC,MAAM,CAAA,CAAC;YAC/C,qBAAM,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;YACjC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YACrB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;SACrB;;;gBAxCJ,SAAS,SAAC;;oBAET,QAAQ,EAAE,gBAAgB;oBAC1B,SAAS,EAAE,CAAC,mBAAmB,CAAC;iBACjC;;;;gBAhBC,SAAS;gBAJT,UAAU;;;4BAuBT,KAAK,SAAC,SAAS;6BAyBf,YAAY,SAAC,OAAO,EAAE,CAAC,QAAQ,CAAC,cAChC,YAAY,SAAC,UAAU,EAAE,CAAC,QAAQ,CAAC;;2BAnDtC;;;;;;;ACAA;;;;gBAKC,QAAQ,SAAC;oBACR,OAAO,EAAE,CAAC,YAAY,EAAE,WAAW,CAAC;oBACpC,YAAY,EAAE,CAAC,gBAAgB,CAAC;oBAChC,OAAO,EAAE,CAAC,gBAAgB,CAAC;iBAC5B;;wBATD;;;;;;;;;;;;;;;"}
